@page "/WeatherProfiles/View"
@using ExampleBlazorApp.Client.HttpClients
@using ExampleBlazorApp.Shared
@using RandomSkunk.Results

<PageTitle>Weather Profiles</PageTitle>

<h1>Weather Profiles</h1>

@if (_profiles is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="form-group">
        <label>
            Profiles:
            <select @onchange="@OnCityChanged">
                @foreach (var profile in _profiles)
                {
                    <option value="@profile.City">@profile.City</option>
                }
            </select>
            <button @onclick="@EditSelectedCity">Edit selected city</button>
            <button @onclick="@AddNewCity">Add new city</button>
        </label>
    </div>
}

@if (_selectedProfile != null)
{
    <hr />
    <div class="form-group">
        <table>
            <caption>Weather profile for @_selectedProfile.City</caption>
            <thead>
                <tr>
                    <th>Month</th>
                    <th>Average High (F)</th>
                    <th>Average Low (F)</th>
                    <th>Standard Deviation</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var monthlyTemperature in _selectedProfile.MonthlyTemperatures)
                {
                    <tr>
                        <td>@monthlyTemperature.MonthName</td>
                        <td>@monthlyTemperature.AverageHigh</td>
                        <td>@monthlyTemperature.AverageLow</td>
                        <td>@monthlyTemperature.StandardDeviation</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (_dialogProfile != null)
{
    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="titleLabel">@_dialogTitle</h5>
                    <button type="button" class="close" @onclick="@CloseDialog" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">Ã—</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@_dialogProfile" OnValidSubmit="@SaveProfile">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="lastName">City: </label>
                            <InputText id="city" class="form-control" @bind-Value="@_dialogProfile.City" placeholder="Enter city"></InputText>
                            <ValidationMessage For="@(() => _dialogProfile.City)" />
                        </div>
                        <table>
                            <caption>Weather profile for @_dialogProfile.City</caption>
                            <thead>
                                <tr>
                                    <th>Month</th>
                                    <th>Average High (F)</th>
                                    <th>Average Low (F)</th>
                                    <th>Standard Deviation</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var monthlyTemperature in _dialogProfile.MonthlyTemperatures)
                                {
                                    <tr>
                                        <td>@monthlyTemperature.MonthName</td>
                                        <td><InputNumber class="form-control" @bind-Value="@monthlyTemperature.AverageHigh"  placeholder="Enter average high temperature"></InputNumber></td>
                                        <td><InputNumber class="form-control" @bind-Value="@monthlyTemperature.AverageLow" placeholder="Enter average low temperature"></InputNumber></td>
                                        <td><InputNumber class="form-control" @bind-Value="@monthlyTemperature.StandardDeviation" placeholder="Enter standard deviation"></InputNumber></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <button type="submit" class="btn btn-primary">Save weather profile</button>
                        <a class="btn btn-outline-primary" @onclick="@CloseDialog">Close</a>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IReadOnlyList<WeatherProfile> _profiles = null!;

    private WeatherProfile? _selectedProfile;

    private bool _isNew;
    private WeatherProfile? _dialogProfile;
    private string? _dialogTitle;

    [Inject]
    public WeatherProfileClient HttpClient { get; set; } = null!;

    [Inject]
    public IJSRuntime JS { get; set; } = null!;

    protected override Task OnInitializedAsync()
    {
        return FetchWeatherProfiles();
    }

    private void OnCityChanged(ChangeEventArgs args)
    {
        _selectedProfile = _profiles.FirstOrDefault(p => p.City == (string?)args.Value);
    }

    private void EditSelectedCity()
    {
        _dialogTitle = $"Edit weather profile for {_selectedProfile!.City}";
        _isNew = false;
        _dialogProfile = _selectedProfile!.Clone();
    }

    private void AddNewCity()
    {
        _dialogTitle = "Add new weather profile";
        _isNew = true;
        _dialogProfile = new WeatherProfile { MonthlyTemperatures = MonthlyTemperature.CreateListForCalendarYear() };
    }

    private void CloseDialog()
    {
        _dialogProfile = null;
        _dialogTitle = null;
    }

    private async Task FetchWeatherProfiles()
    {
        // Make a call to the server to get a list of weather profiles.
        var result = await HttpClient.GetWeatherProfiles();

         // Handle the result:
         await result

            // If the call to the server was successful, set the _profiles and _selectedProfile fields.
            .OnSuccess(profiles =>
                {
                    _profiles = profiles;
                    _selectedProfile = _profiles.FirstOrDefault();
                })

            // If the call to the server was not successful, log to the browser console and alert the user.
            .OnFailLogAndAlert(JS);
    }

    private async Task SaveProfile()
    {
        foreach (var monthlyTemperature in _dialogProfile!.MonthlyTemperatures)
            monthlyTemperature.City = _dialogProfile.City;

        Result result;

        if (_isNew)
        {
            // Make a call to the server to add the new weather profile.
            result = await HttpClient.AddWeatherProfile(_dialogProfile);
        }
        else
         {
             // Make a call to the server to edit the existing weather profile.
             result = await HttpClient.EditWeatherProfile(_dialogProfile);
         }

         // Handle the result:
        await result

            // If the call to the server was successful, close the dialog.
            .OnSuccess(() => CloseDialog())

            // If the call to the server was not successful, log to the browser console and alert the user.
            .OnFailLogAndAlert(JS);
    }
}
